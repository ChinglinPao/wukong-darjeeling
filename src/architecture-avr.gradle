model {
    components {
        'darjeeling.elf'(NativeExecutableSpec) {
            targetPlatform 'avr'
        }
    }
    toolChains {
        gcc(Gcc) {
            target('avr') { t ->
				t.getcCompiler().setExecutable('avr-gcc');
				t.getCppCompiler().setExecutable('avr-g++');
				t.getObjcCompiler().setExecutable('avr-gcc');
				t.getObjcppCompiler().setExecutable('avr-g++');
				t.getAssembler().setExecutable('avr-as');
				t.getLinker().setExecutable('avr-gcc');
				t.getStaticLibArchiver().setExecutable('avr-ar');
            }
        }
    }
    platforms {
        avr {
            architecture 'avr'
        }
    }
}

binaries.all {
    cCompiler.args "-mmcu=${djMcu}"
    cCompiler.args "-Os"
    cCompiler.args "-finline-limit-0"
    cCompiler.args "-ggdb"
    cCompiler.args "-Wall"
    cCompiler.args "-Werror"
    cCompiler.args "-std=gnu99"
    linker.args "-mmcu=${djMcu}"
    linker.args "-Wl,--section-start=.reprogram_flash_page=0x1F800"
}

// AVR tasks: transform infusion archives to c arrays
project.afterEvaluate {
    // Add these in afterEvaluate, otherwise these tasks won't exist yet
    task createCArrays {
        dependsOn tasks['createLibArchive']
        dependsOn tasks['createAppArchive']
        ext.destDir = new File("${buildDir}/carrays")
        def appArchiveFile = tasks['createAppArchive'].ext.archiveFile
        def appArchiveCFile = "${destDir}/app_infusiondja.c"
        def libArchiveFile = tasks['createLibArchive'].ext.archiveFile
        def libArchiveCFile = "${destDir}/lib_infusionsdja.c"

        doLast {
            ensureEmptyDir(destDir)
            ant.carray(dest: libArchiveCFile,
                                 src: libArchiveFile,
                                 arrayname: 'di_lib_infusions_archive',
                                 arraysize: 0,
                                 keywords: "${carray_lib_keywords}")
            ant.carray(dest: appArchiveCFile,
                                 src: appArchiveFile,
                                 arrayname: 'di_app_infusion_archive',
                                 arraysize: djAppArchiveSize,
                                 keywords: "${carray_app_keywords}")
        }
    }
    project.model {
        components {
            'darjeeling.elf'(NativeExecutableSpec) {
                sources {
                    main(CSourceSet) {  
                        source {
                            srcDir createCArrays.destDir
                            include '**/*.c'
                            builtBy(createCArrays)
                        }
                    }
                }
            }
        }
    }
}

// AVR tasks: platformSpecificAssemble
project.ext.carray_lib_keywords = 'PROGMEM'
project.ext.carray_app_keywords = 'PROGMEM __attribute__ ((aligned (SPM_PAGESIZE)))'

task createIHexFiles {
    dependsOn assemble

    def destDir = new File("${buildDir}/darjeeling")
    def djIHex = "${destDir}/darjeeling.ihex"
    def djEepromIHex = "${destDir}/darjeeling_eeprom.ihex"

    inputs.file new File(djTargetElfFile)
    outputs.dir destDir

    doLast {
        ensureEmptyDir(destDir)

        // Create darjeeling.ihex
        exec {
            executable 'avr-objcopy'
            args '-j', '.text', '-j', '.data', '-O', 'ihex', djTargetElfFile, djIHex
        }
        // Create darjeeling_eeprom.ihex
        exec {
            executable 'avr-objcopy'
            args '-j', '.eeprom', '-O', 'ihex', djTargetElfFile, djEepromIHex
        }
    }    
}

task platformSpecificAssemble(dependsOn: createIHexFiles) << {
    exec {
        executable 'avr-size'
        args '-C', djTargetElfFile
    }
}

/// AVR helper tasks
task avrdude(dependsOn: platformSpecificAssemble) << {
    exec {
        executable 'avrdude'
        args '-p', 'atmega2560', '-P', "${avrdudeprogrammer}", '-c', 'wiring', '-U', 'flash:w:darjeeling.ihex'
    }
}

task avarice << {
    exec {
        executable 'avarice'
        args '-g', '-j', 'usb', '-B', '4000000', ':4242'
    }
}

task avrora(dependsOn: assemble) << {
    javaexec {
        main '-jar'
        args '/Users/niels/git/avrora/jars/avrora-beta-1.7.117.jar', '-monitors=c-timer,rtc,c-print', '-single', '-mcu=atmega128', djTargetElfFile
    }
}

