diff --git wukong/master/baseapp/empty_git_directory.txt wukong/master/baseapp/empty_git_directory.txt
new file mode 100644
index 0000000..d7ebf7c
--- /dev/null
+++ wukong/master/baseapp/empty_git_directory.txt
@@ -0,0 +1 @@
+Master still needs a base app, but it's empty for Darjeeling. Refactor this later.
diff --git wukong/master/configuration.py wukong/master/configuration.py
index df56a5a..404409d 100644
--- wukong/master/configuration.py
+++ wukong/master/configuration.py
@@ -1,8 +1,8 @@
 import os
 from configobj import ConfigObj
 
-ROOT_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), "..")
-CONFIG_PATH = os.path.join(ROOT_PATH, 'config', 'master.cfg')
+ROOT_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), '..', '..')
+CONFIG_PATH = os.path.join(ROOT_PATH, 'wukong', 'config', 'master.cfg')
 config = ConfigObj(CONFIG_PATH)
 
 ZWAVE_GATEWAY_IP = config.get('ZWAVE_GATEWAY_IP', '')
@@ -13,10 +13,10 @@ SIMULATION = int(config.get('SIMULATION', 1))
 
 DEPLOY_PLATFORMS = ['avr_mega2560']
 
-#XML_PATH = os.path.join(ROOT_PATH, 'Applications')
-COMPONENTXML_PATH = os.path.join(ROOT_PATH, 'ComponentDefinitions', 'WuKongStandardLibrary.xml')
-TEMPLATE_DIR = os.path.join(ROOT_PATH, 'tools', 'xml2java')
-JAVA_OUTPUT_DIR = os.path.join(ROOT_PATH, 'java', 'examples')
-TESTRTT_PATH = os.path.join(ROOT_PATH, 'tools', 'python', 'pyzwave')
-APP_DIR = os.path.join(ROOT_PATH, 'vm', 'apps')
-BASE_DIR = os.path.join(APP_DIR, 'base')
+#XML_PATH = os.path.join(ROOT_PATH, 'wukong', 'Applications')
+COMPONENTXML_PATH = os.path.join(ROOT_PATH, 'wukong', 'ComponentDefinitions', 'WuKongStandardLibrary.xml')
+TEMPLATE_DIR = os.path.join(ROOT_PATH, 'wukong', 'tools', 'xml2java')
+JAVA_OUTPUT_DIR = os.path.join(ROOT_PATH, 'src', 'app', 'wkdeploy', 'java')
+TESTRTT_PATH = os.path.join(ROOT_PATH, 'wukong', 'tools', 'python', 'pyzwave')
+APP_DIR = os.path.join(ROOT_PATH, 'wukong', 'apps')
+BASE_DIR = os.path.join(ROOT_PATH, 'wukong', 'master', 'baseapp')
diff --git wukong/master/wkpf/codegen.py wukong/master/wkpf/codegen.py
index 4334ad5..30896ae 100755
--- wukong/master/wkpf/codegen.py
+++ wukong/master/wkpf/codegen.py
@@ -98,9 +98,10 @@ class CodeGen:
     # component xml dom
     if len(args) == 2:
       # Directories
-      self.global_vm_dir = os.path.join('vm', 'src')
-      self.vm_dir = os.path.join('vm', 'src', 'native_wuclasses')
-      self.java_dir = os.path.join('java', 'nanovm', 'wkpf')
+
+      self.global_vm_dir = os.path.join('src', 'lib', 'wkpf', 'c', 'common')
+      self.vm_dir = os.path.join('src', 'lib', 'wkpf', 'c', 'common', 'native_wuclasses')
+      self.java_dir = os.path.join('wukong', 'javax', 'wukong', 'virtualwuclasses')
 
       self.component_string = args[0]
       self.project_dir = args[1]
@@ -137,7 +138,7 @@ class CodeGen:
     app.info("==================Begin TypeDefs=====================")
     # Boilerplate for Java global constants file
     self.global_virtual_constants_lines.append('''
-        package nanovm.wkpf;
+        package javax.wukong.virtualwuclasses;
 
         public class GENERATEDWKPF {
     ''')
@@ -217,7 +218,9 @@ class CodeGen:
       # Parsing to WuKong Profile Framework Component Library header in Java
       if wuclass.getAttribute('virtual') == 'true':
         wuclass_virtual_super_lines.append('''
-        package nanovm.wkpf;
+        package javax.wukong.virtualwuclasses;
+        import javax.wukong.wkpf.VirtualWuObject;
+        import javax.wukong.wkpf.WKPF;
 
         public abstract class %s extends VirtualWuObject {
           public static byte[] properties = new byte[] {
@@ -252,13 +255,12 @@ class CodeGen:
 
       # Generate C header for each native component implementation
       wuclass_native_header_lines.append('''
-      #include <wkpf.h>
       #include "native_wuclasses.h"
 
       #ifndef %sH
       #define %sH
 
-      extern wkpf_wuclass_definition %s;
+      extern wuclass_t %s;
 
       #endif
       ''' % (
@@ -269,20 +271,18 @@ class CodeGen:
 
       # Generate C implementation for each native component implementation
       wuclass_native_impl_lines.append('''
-      #include <wkpf.h>
       #include "native_wuclasses.h"
 
       #ifdef ENABLE_%s
 
-      extern void %s(wkpf_local_wuobject *wuobject);
+      extern void %s(wuobject_t *wuobject);
 
-      uint8_t %s[] = {
       ''' % (
               wuClass.getCDefineName(),
               wuClass.getCUpdateName(),
-              wuClass.getCPropertyName(),
             ))
 
+      wuclass_native_impl_properties_lines = ''
       for ind, property in enumerate(wuClass.getProperties().values()):
         datatype = property.getDataType()
         access = property.getAccess()
@@ -295,24 +295,23 @@ class CodeGen:
           line += ","
 
         line += "\n"
-        wuclass_native_impl_lines.append(line)
-
-      wuclass_native_impl_lines.append('''
-      };
-      ''')
+        wuclass_native_impl_properties_lines += line
 
       wuclass_native_impl_lines.append('''
-      wkpf_wuclass_definition %s = {
+      wuclass_t %s = {
         %s,
         %s,
         %d,
+        NULL,
+        {
         %s
+        }
       };
       ''' % (wuClass.getCName(), 
             wuClass.getCConstName(),
             wuClass.getCUpdateName(),
             len(wuClass.getProperties()), 
-            wuClass.getCPropertyName()))
+            wuclass_native_impl_properties_lines))
 
       wuclass_native_impl_lines.append('''
       #endif
diff --git wukong/master/wkpf/pynvc.py wukong/master/wkpf/pynvc.py
index f8e94c8..2ebe114 100644
--- wukong/master/wkpf/pynvc.py
+++ wukong/master/wkpf/pynvc.py
@@ -14,6 +14,19 @@ REPRG_COMMIT_R_OK            = 0x31
 REPRG_COMMIT_R_RETRANSMIT    = 0x32
 REPRG_COMMIT_R_FAILED        = 0x33
 
+REPRG_DJ_OPEN                = 0x10
+REPRG_DJ_OPEN_R              = 0x11
+REPRG_DJ_WRITE               = 0x12
+REPRG_DJ_WRITE_R             = 0x13
+REPRG_DJ_COMMIT              = 0x14
+REPRG_DJ_COMMIT_R            = 0x15
+REPRG_DJ_REBOOT              = 0x16
+
+REPRG_DJ_RETURN_OK                 = 0x00
+REPRG_DJ_RETURN_REQUEST_RETRANSMIT = 0x01
+REPRG_DJ_RETURN_TOO_LARGE          = 0x02
+REPRG_DJ_RETURN_FAILED             = 0x03
+
 GETRUNLVL                    = 0x50
 GETRUNLVL_R                  = 0x51
 SETRUNLVL                    = 0x60
diff --git wukong/master/wkpf/wkapplication.py wukong/master/wkpf/wkapplication.py
index d814ae7..4dffafa 100644
--- wukong/master/wkpf/wkapplication.py
+++ wukong/master/wkpf/wkapplication.py
@@ -454,9 +454,9 @@ class WuApplication:
       self.status = "Compressing java to bytecode format"
       gevent.sleep(0)
 
-      # Generate nvmdefault.h
+      # Build the java code
       self.info('==Compressing application code to bytecode format')
-      pp = Popen('cd %s; make application FLOWXML=%s' % (platform_dir, self.id), shell=True, stdout=PIPE, stderr=PIPE)
+      pp = Popen('cd %s/..; ant clean; ant master-create-deploy-archive' % (JAVA_OUTPUT_DIR), shell=True, stdout=PIPE, stderr=PIPE)
       self.returnCode = None
       (infomsg,errmsg) = pp.communicate()
 
@@ -465,8 +465,8 @@ class WuApplication:
       self.error(errmsg)
       self.version += 1
       if pp.returncode != 0:
-        self.error('==Error generating nvmdefault.h')
-        self.status = "Error generating nvmdefault.h"
+        self.error('==Error generating wkdeploy.dja')
+        self.status = "Error generating wkdeploy.dja"
         gevent.sleep(0)
         return False
       self.info('==Finishing compression')
@@ -490,7 +490,7 @@ class WuApplication:
         ret = False
         retries = 3
         while retries > 0:
-          if not comm.reprogram(node_id, os.path.join(platform_dir, 'nvmdefault.h'), retry=False):
+          if not comm.reprogram(node_id, os.path.join(JAVA_OUTPUT_DIR, '..', 'build', 'wkdeploy.dja'), retry=False):
             self.status = "Deploying unsucessful for node %d, trying again" % (node_id)
             gevent.sleep(0)
             self.error('==Node not deployed successfully, retries = %d' % (retries))
diff --git wukong/master/wkpf/wkpf.py wukong/master/wkpf/wkpf.py
index b937c7a..2c8302d 100755
--- wukong/master/wkpf/wkpf.py
+++ wukong/master/wkpf/wkpf.py
@@ -261,9 +261,6 @@ class WuClass:
     def getCUpdateName(self):
         return self.getCName() + "_update"
 
-    def getCPropertyName(self):
-        return self.getCName() + "_properties"
-
     def getCConstName(self):
         return "WKPF_" + self.getJavaConstName()
 
diff --git wukong/master/wkpf/wkpfcomm.py wukong/master/wkpf/wkpfcomm.py
index 47e5757..954783d 100755
--- wukong/master/wkpf/wkpfcomm.py
+++ wukong/master/wkpf/wkpfcomm.py
@@ -347,16 +347,95 @@ class Communication:
     def reprogram(self, destination, filename, retry=False):
       master_busy()
 
-      ret = self.reprogramNvmdefault(destination, filename)
+      ret = self.reprogramInfusion(destination, filename)
       if retry:
         if not ret:
           print "Retrying after 5 seconds..."
           time.sleep(5)
-          return self.reprogramNvmdefault(destination, filename)
+          return self.reprogramInfusion(destination, filename)
       else:
         master_available()
         return ret
 
+    def reprogramInfusion(self, destination, filename):
+      MESSAGESIZE = 30
+
+      bytecode = []
+      with open(filename, "rb") as f:
+        byte = f.read(1)
+        while byte != "":
+          bytecode.append(ord(byte))
+          byte = f.read(1)
+
+      infusion_length = len(bytecode)
+      if infusion_length == 0:
+        print "Can't read infusion file"
+        return False
+
+      # Start the reprogramming process
+      print "Sending REPRG_OPEN command with image size ", len(bytecode)
+      reply = self.zwave.send(destination, pynvc.REPRG_DJ_OPEN, [len(bytecode) >> 8 & 0xFF, len(bytecode) & 0xFF], [pynvc.REPRG_DJ_OPEN_R])
+
+      if reply == None:
+        print "No reply from node to REPRG_OPEN command"
+        return False
+
+      if reply.payload[2] != pynvc.REPRG_DJ_RETURN_OK:
+        print "Got error in response to REPRG_OPEN: " + reply.payload[2]
+
+      pagesize = reply.payload[3] + reply.payload[4]*256
+
+      print "Uploading", len(bytecode), "bytes."
+
+      pos = 0
+      while not pos == len(bytecode):
+        payload_pos = [pos%256, pos/256]
+        payload_data = bytecode[pos:pos+MESSAGESIZE]
+        print "Uploading bytes", pos, "to", pos+MESSAGESIZE, "of", len(bytecode)
+        print pos/pagesize, (pos+len(payload_data))/pagesize, "of pagesize", pagesize
+        if pos/pagesize == (pos+len(payload_data))/pagesize:
+          self.zwave.send(destination, pynvc.REPRG_DJ_WRITE, payload_pos+payload_data, [])
+          pos += len(payload_data)
+        else:
+          print "Send last packet of this page and wait for a REPRG_DJ_WRITE_R after each full page"
+          reply = self.zwave.send(destination, pynvc.REPRG_DJ_WRITE, payload_pos+payload_data, [pynvc.REPRG_DJ_WRITE_R])
+          print "Reply: ", reply
+          if reply == None:
+            print "No reply received. Code update failed. :-("
+            return False
+          elif reply.payload[2] == pynvc.REPRG_DJ_RETURN_OK:
+            print "Received REPRG_DJ_RETURN_OK in reply to packet writing at", payload_pos
+            pos += len(payload_data)
+          elif reply.payload[2] == pynvc.REPRG_DJ_RETURN_REQUEST_RETRANSMIT:
+            pos = reply.payload[3] + reply.payload[4]*256
+            print "===========>Received REPRG_DJ_WRITE_R_RETRANSMIT request to retransmit from ", pos
+          else:
+            print "Unexpected reply:", reply.payload
+            return False
+        if pos == len(bytecode):
+          print "Send REPRG_DJ_COMMIT after last packet"
+          reply = self.zwave.send(destination, pynvc.REPRG_DJ_COMMIT, [pos%256, pos/256], [pynvc.REPRG_DJ_COMMIT_R])
+          print "Reply: ", reply
+          if reply == None:
+            print "No reply, commit failed."
+            return False
+          elif reply.payload[2] == pynvc.REPRG_DJ_RETURN_FAILED:
+            print "Received REPRG_DJ_RETURN_FAILED, commit failed."
+            return False
+          elif reply.payload[2] == pynvc.REPRG_DJ_RETURN_REQUEST_RETRANSMIT:
+            pos = reply.payload[3] + reply.payload[4]*256
+            print "===========>Received REPRG_COMMIT_R_RETRANSMIT request to retransmit from ", pos
+            if pos >= len(bytecode):
+              print "Received REPRG_DJ_RETURN_REQUEST_RETRANSMIT >= the image size. This shoudn't happen!"
+          elif reply.payload[2] == pynvc.REPRG_DJ_RETURN_OK:
+            print "Commit OK.", reply.payload
+          else:
+            print "Unexpected reply:", reply.payload
+            return False
+      self.zwave.send(destination, pynvc.REPRG_DJ_REBOOT, [], [])
+      print "Sent reboot.", reply.payload
+      return True;
+
     def reprogramNvmdefault(self, destination, filename):
       MESSAGESIZE = 16
 
diff --git wukong/master/wkpf/xml2java/jinja_templates/application.java wukong/master/wkpf/xml2java/jinja_templates/application.java
index 8d5d1a2..c56db4f 100644
--- wukong/master/wkpf/xml2java/jinja_templates/application.java
+++ wukong/master/wkpf/xml2java/jinja_templates/application.java
@@ -1,9 +1,7 @@
-import java.io.*;
-import nanovm.avr.*;
-import nanovm.wkpf.*;
-import nanovm.lang.Math;
+import javax.wukong.wkpf.*;
+import javax.wukong.virtualwuclasses.*;
 
-public class {{ applicationName }} {
+public class WKDeploy {
 
     // =========== Begin: Generated by the translator from application WuML
     /* Component instance IDs to indexes:
@@ -27,7 +25,7 @@ public class {{ applicationName }} {
     //component node id and port number table
     // each row corresponds to the component index mapped from component ID above
     // each row has two items: node id, port number
-    private final static byte[][] componentInstanceToWuObjectAddrMap = {
+    private final static Object[] componentInstanceToWuObjectAddrMap = {
       {%- for wuobjectgroup in wuObjects %}
       new byte[]{ {%- for wuobject in wuobjectgroup %}
         {{ wuobject.toJava() }}{{ ',' if not loop.last else '' }}
@@ -36,7 +34,7 @@ public class {{ applicationName }} {
       {%- endfor %}
     };
 
-    private final static byte[][] heartbeatToNodeAddrMap = {
+    private final static Object[] heartbeatToNodeAddrMap = {
       {%- for heartbeatGroup in heartbeatGroups %}
       new byte[]{ {%- for node in heartbeatGroup['members'] %}
         {{ node }}{{ ',' if not loop.last else '' }}
@@ -53,10 +51,10 @@ public class {{ applicationName }} {
     // =========== End: Generated by the translator from application WuML
 
     public static void main (String[] args) {
-        System.out.println("{{ applicationName }}");
-        System.out.println(WKPF.getMyNodeId());
-        WKPF.loadHeartbeatToNodeAddrMap(heartbeatToNodeAddrMap);
-        WKPF.loadHeartbeatPeriods(heartbeatGroupPeriods);
+        // System.out.println("{{ applicationName }}");
+        System.out.println("Node id:" + WKPF.getMyNodeId());
+        // WKPF.loadHeartbeatToNodeAddrMap(heartbeatToNodeAddrMap);
+        // WKPF.loadHeartbeatPeriods(heartbeatGroupPeriods);
         WKPF.loadComponentToWuObjectAddrMap(componentInstanceToWuObjectAddrMap);
         WKPF.loadLinkDefinitions(linkDefinitions);
         initialiseLocalWuObjects();
@@ -78,20 +76,20 @@ public class {{ applicationName }} {
 
         // Virtual WuClasses (Java)
         VirtualWuObject wuclassInstance{{ objectLst[0].getWuClassName() }} = new {{ objectLst[0].getWuClass().getJavaClassName() }}();
-        WKPF.registerWuClass(WKPF.{{ objectLst[0].getWuClass().getJavaConstName() }}, {{ objectLst[0].getWuClass().getJavaGenClassName() }}.properties);
-        WKPF.createWuObject((short)WKPF.{{ objectLst[0].getWuClass().getJavaConstName() }}, WKPF.getPortNumberForComponent((short){{ objectLst[0].getInstanceIndex() }}), wuclassInstance{{ objectLst[0].getWuClassName() }});
+        WKPF.registerWuClass(GENERATEDWKPF.{{ objectLst[0].getWuClass().getJavaConstName() }}, {{ objectLst[0].getWuClass().getJavaGenClassName() }}.properties);
+        WKPF.createWuObject((short)GENERATEDWKPF.{{ objectLst[0].getWuClass().getJavaConstName() }}, WKPF.getPortNumberForComponent((short){{ objectLst[0].getInstanceIndex() }}), wuclassInstance{{ objectLst[0].getWuClassName() }});
         {%- for property in objectLst[0] -%}
         {%- if property.hasDefault() -%}
         {% if property.getDataType() == 'boolean' %}
-        WKPF.setPropertyBoolean(wuclassInstance{{ objectLst[0].getWuClassName() }}, WKPF.{{ property.getJavaConstName() }}, {{ property.getCurrentValue().lower() }});
+        WKPF.setPropertyBoolean(wuclassInstance{{ objectLst[0].getWuClassName() }}, GENERATEDWKPF.{{ property.getJavaConstName() }}, {{ property.getCurrentValue().lower() }});
         {% elif property.getDataType() == 'int' %}
-        WKPF.setPropertyShort(wuclassInstance{{ objectLst[0].getWuClassName() }}, WKPF.{{ property.getJavaConstName() }}, (short){{ property.getCurrentValue() }});
+        WKPF.setPropertyShort(wuclassInstance{{ objectLst[0].getWuClassName() }}, GENERATEDWKPF.{{ property.getJavaConstName() }}, (short){{ property.getCurrentValue() }});
         {% elif property.getDataType() == 'short' %}
-        WKPF.setPropertyShort(wuclassInstance{{ objectLst[0].getWuClassName() }}, WKPF.{{ property.getJavaConstName() }}, (short){{ property.getCurrentValue() }});
+        WKPF.setPropertyShort(wuclassInstance{{ objectLst[0].getWuClassName() }}, GENERATEDWKPF.{{ property.getJavaConstName() }}, (short){{ property.getCurrentValue() }});
         {% elif property.getDataType() == 'refresh_rate' %}
-        WKPF.setPropertyRefreshRate(wuclassInstance{{ objectLst[0].getWuClassName() }}, WKPF.{{ property.getJavaConstName() }}, (short){{ property.getCurrentValue() }});
+        WKPF.setPropertyRefreshRate(wuclassInstance{{ objectLst[0].getWuClassName() }}, GENERATEDWKPF.{{ property.getJavaConstName() }}, (short){{ property.getCurrentValue() }});
         {% else %}
-        WKPF.setPropertyShort(wuclassInstance{{ objectLst[0].getWuClassName() }}, WKPF.{{ property.getJavaConstName() }}, WKPF.{{ property.getWuType().getValueInJavaConstant(property.getCurrentValue()) }});
+        WKPF.setPropertyShort(wuclassInstance{{ objectLst[0].getWuClassName() }}, GENERATEDWKPF.{{ property.getJavaConstName() }}, GENERATEDWKPF.{{ property.getWuType().getValueInJavaConstant(property.getCurrentValue()) }});
         {%- endif -%}
         {%- endif -%}
         {%- endfor -%}
@@ -99,19 +97,19 @@ public class {{ applicationName }} {
         {% else %}
 
         // Native WuClasses (C)
-        WKPF.createWuObject((short)WKPF.{{ objectLst[0].getWuClass().getJavaConstName() }}, WKPF.getPortNumberForComponent((short){{ objectLst[0].getInstanceIndex() }}), null);
+        WKPF.createWuObject((short)GENERATEDWKPF.{{ objectLst[0].getWuClass().getJavaConstName() }}, WKPF.getPortNumberForComponent((short){{ objectLst[0].getInstanceIndex() }}), null);
         {%- for property in objectLst[0] -%}
         {%- if property.hasDefault() -%}
         {% if property.getDataType() == 'boolean' %}
-        WKPF.setPropertyBoolean((short){{ objectLst[0].getInstanceIndex() }}, WKPF.{{ property.getJavaConstName() }}, {{ property.getCurrentValue().lower() }});
+        WKPF.setPropertyBoolean((short){{ objectLst[0].getInstanceIndex() }}, GENERATEDWKPF.{{ property.getJavaConstName() }}, {{ property.getCurrentValue().lower() }});
         {% elif property.getDataType() == 'int' %}
-        WKPF.setPropertyShort((short){{ objectLst[0].getInstanceIndex() }}, WKPF.{{ property.getJavaConstName() }}, (short){{ property.getCurrentValue() }});
+        WKPF.setPropertyShort((short){{ objectLst[0].getInstanceIndex() }}, GENERATEDWKPF.{{ property.getJavaConstName() }}, (short){{ property.getCurrentValue() }});
         {% elif property.getDataType() == 'short' %}
-        WKPF.setPropertyShort((short){{ objectLst[0].getInstanceIndex() }}, WKPF.{{ property.getJavaConstName() }}, (short){{ property.getCurrentValue() }});
+        WKPF.setPropertyShort((short){{ objectLst[0].getInstanceIndex() }}, GENERATEDWKPF.{{ property.getJavaConstName() }}, (short){{ property.getCurrentValue() }});
         {% elif property.getDataType() == 'refresh_rate' %}
-        WKPF.setPropertyRefreshRate((short){{ objectLst[0].getInstanceIndex() }}, WKPF.{{ property.getJavaConstName() }}, (short){{ property.getCurrentValue() }});
+        WKPF.setPropertyRefreshRate((short){{ objectLst[0].getInstanceIndex() }}, GENERATEDWKPF.{{ property.getJavaConstName() }}, (short){{ property.getCurrentValue() }});
         {% else %}
-        WKPF.setPropertyShort((short){{ objectLst[0].getInstanceIndex() }}, WKPF.{{ property.getJavaConstName() }}, WKPF.{{ property.getWuType().getValueInJavaConstant(property.getCurrentValue()) }});
+        WKPF.setPropertyShort((short){{ objectLst[0].getInstanceIndex() }}, GENERATEDWKPF.{{ property.getJavaConstName() }}, GENERATEDWKPF.{{ property.getWuType().getValueInJavaConstant(property.getCurrentValue()) }});
         {%- endif -%}
         {%- endif -%}
         {%- endfor -%}
diff --git wukong/master/wkpf/xml2java/translator.py wukong/master/wkpf/xml2java/translator.py
index 7b99288..ddb036e 100755
--- wukong/master/wkpf/xml2java/translator.py
+++ wukong/master/wkpf/xml2java/translator.py
@@ -369,10 +369,10 @@ public class {{ CLASS_NAME }} {
 def generateJava(application):
     application.setOutputDir(JAVA_OUTPUT_DIR)
     jinja2_env = Environment(loader=FileSystemLoader([os.path.join(os.path.dirname(__file__), 'jinja_templates')]))
-    output = open(os.path.join(application.destinationDir, application.applicationName+".java"), 'w')
+    output = open(os.path.join(application.destinationDir, "WKDeploy.java"), 'w')
     wuObjects = sorted(application.wuObjects.values(), key=lambda obj: obj[0].getInstanceIndex())
-        
-    print 'generating', os.path.join(application.destinationDir, application.applicationName+".java")
+
+    print 'generating', os.path.join(application.destinationDir, "WKDeploy.java")
     print wuObjects[0][0].getProperties()
 
     output.write(jinja2_env.get_template('application.java').render(applicationName=application.applicationName,
